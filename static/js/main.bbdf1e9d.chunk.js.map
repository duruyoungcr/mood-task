{"version":3,"sources":["components/MoodHistory/MoodHistory.module.css","components/MoodSelection/MoodSelection.module.css","components/MoodHistoryItem/MoodHistoryItem.module.css","moodOptions.js","components/MoodSelection/index.js","components/MoodHistoryItem/index.js","components/MoodHistory/index.js","components/Main/index.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","moodOptions","id","name","description","emoji","MoodSelection","setMoodHistory","useState","selectedMood","setSelectedMood","saving","setSaving","handleMoodSelection","mood","className","styles","container","content","src","alt","img","width","height","heading","selections","map","selection","toLowerCase","title","onClick","role","desc","moodHistory","JSON","parse","localStorage","getItem","Object","assign","time","Date","length","splice","unshift","setItem","stringify","setTimeout","handleMoodSave","disabled","btn","MoodHistoryItem","dayjs","extend","localizedFormat","format","MoodHistory","useEffect","brand","subtitle","history__list","empty","empty__content","empty__img","empty__text","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbdf1e9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MoodHistory_container__ZwinC\",\"brand\":\"MoodHistory_brand__2vZlr\",\"title\":\"MoodHistory_title__iWC5s\",\"subtitle\":\"MoodHistory_subtitle__1HObn\",\"history__list\":\"MoodHistory_history__list__Z5v5z\",\"empty\":\"MoodHistory_empty__3eoVj\",\"empty__img\":\"MoodHistory_empty__img__2csMJ\",\"empty__text\":\"MoodHistory_empty__text__36woe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MoodSelection_container__3ll_s\",\"content\":\"MoodSelection_content__iF_-W\",\"img\":\"MoodSelection_img__NNXL5\",\"heading\":\"MoodSelection_heading__7yYWq\",\"selections\":\"MoodSelection_selections__3C1O2\",\"selection\":\"MoodSelection_selection__2xD-9\",\"desc\":\"MoodSelection_desc__2jLRO\",\"btn\":\"MoodSelection_btn__29Grm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MoodHistoryItem_container__2CSzl\",\"content\":\"MoodHistoryItem_content__1Dqpw\",\"selection\":\"MoodHistoryItem_selection__2sw4h\",\"desc\":\"MoodHistoryItem_desc__FquBJ\",\"time\":\"MoodHistoryItem_time__f9oJr\",\"img\":\"MoodHistoryItem_img__18UPv\"};","const moodOptions = [\r\n    {\r\n        id: '1',\r\n        name: 'Angry',\r\n        description: 'Cat wasn’t having it',\r\n        emoji: '😖',\r\n    },\r\n    {\r\n        id: '2',\r\n        name: 'Indifferent',\r\n        description: 'Cat was indifferent',\r\n        emoji: '😐',\r\n    },\r\n    {\r\n        id: '3',\r\n        name: 'Excited',\r\n        description: 'Cat was super excited!',\r\n        emoji: '😃',\r\n    }\r\n]\r\n\r\nexport default moodOptions","import { useState } from 'react'\r\nimport moodOptions from '../../moodOptions'\r\nimport styles from './MoodSelection.module.css'\r\n\r\nconst MoodSelection = ({ setMoodHistory }) => {\r\n    const [selectedMood, setSelectedMood] = useState('')\r\n    const [saving, setSaving] = useState(false)\r\n    const handleMoodSelection = (mood) => {\r\n        setSelectedMood(mood)\r\n    }\r\n    const handleMoodSave = (mood) => {\r\n        setSaving(true)\r\n        const moodHistory = JSON.parse(localStorage.getItem('moodHistory')) || []\r\n        Object.assign(mood, { time: new Date() })\r\n        if (moodHistory.length < 4) {\r\n            moodHistory.unshift(mood)\r\n        } else {\r\n            moodHistory.splice(moodHistory.length - 1, 1);\r\n            moodHistory.unshift(mood)\r\n        }\r\n        localStorage.setItem('moodHistory', JSON.stringify(moodHistory))\r\n        setTimeout(() => {\r\n            setSaving(false)\r\n            setMoodHistory(moodHistory)\r\n            handleMoodSelection('')\r\n        }, 2000);\r\n    }\r\n\r\n    return (\r\n        <section className={styles.container}>\r\n            <div className={styles.content}>\r\n                <img src={'./logo.png'} alt='cat' className={styles.img} width={94} height={79} />\r\n                <h1 className={styles.heading}>\r\n                    What is your cat’s current mood?\r\n                </h1>\r\n                <div className={styles.selections}>\r\n                    {moodOptions.map(mood => (\r\n                        <div\r\n                            className={`${styles.selection} ${mood.name.toLowerCase()} ${selectedMood?.id === mood.id && mood.name.toLowerCase() + '--active'}`}\r\n                            key={mood.id}\r\n                            title={mood.name}\r\n                            onClick={() => handleMoodSelection(mood)}\r\n                            role={'button'}\r\n                            aria-label={`Select ${mood.name.toLowerCase()} as your cat's mood`}\r\n                        >\r\n                            {mood.emoji}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className={styles.desc}>\r\n                    {selectedMood &&\r\n                        <p className={`${selectedMood?.name?.toLowerCase()}`}>\r\n                            {selectedMood.description}\r\n                        </p>\r\n                    }\r\n                </div>\r\n                <button\r\n                    onClick={() => handleMoodSave(selectedMood)}\r\n                    disabled={!selectedMood ? true : false}\r\n                    className={`${styles.btn} ${selectedMood ? 'bg-purple' : 'bg-gray'}`}\r\n                >\r\n                    {saving ?\r\n                        'Saving...' : 'Save mood'\r\n                    }\r\n                </button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default MoodSelection\r\n","import styles from './MoodHistoryItem.module.css';\r\nimport dayjs from 'dayjs'\r\nimport localizedFormat from 'dayjs/plugin/localizedFormat'\r\n\r\nconst MoodHistoryItem = ({ mood }) => {\r\n    dayjs.extend(localizedFormat)\r\n    return (\r\n        <div className={`${styles.container} ${mood.name.toLowerCase() + '--border'}`}>\r\n            <div className={styles.content}>\r\n                <div\r\n                    className={`${styles.selection} ${mood.name.toLowerCase()} ${mood.name.toLowerCase() + '--active'}`}\r\n                >\r\n                    {mood.emoji}\r\n                </div>\r\n                <div>\r\n                    <h4 className={`${mood.name.toLowerCase()} ${styles.desc}`}>{mood.description}</h4>\r\n                    <p className={styles.time}>\r\n                        {dayjs(mood.time).format('DD-MM-YYYY')} / {dayjs(mood.time).format('HH:mm')}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <img src={'./assets/images/cat.png'} alt='cat' className={styles.img} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoodHistoryItem\r\n","import { useEffect } from 'react'\r\nimport MoodHistoryItem from '../MoodHistoryItem'\r\nimport styles from './MoodHistory.module.css'\r\n\r\nconst MoodHistory = ({ moodHistory }) => {\r\n    useEffect(() => {\r\n    }, [moodHistory])\r\n    return (\r\n        <section className={styles.container}>\r\n            <div className={styles.brand}>\r\n                <img src={'./logo.png'} alt='cat' className={styles.img} width={49} height={41} />\r\n                <h1 className={styles.title}>Cat mood tracker™</h1>\r\n            </div>\r\n            <p className={styles.subtitle}>mood history</p>\r\n            {moodHistory.length > 0 ?\r\n                <div className={styles.history__list}>\r\n                    {moodHistory.map(mood => (\r\n                        <MoodHistoryItem key={mood.id + '_' + mood.time} mood={mood} />\r\n                    ))}\r\n                </div>\r\n                :\r\n                <div className={styles.empty}>\r\n                    <div className={styles.empty__content}>\r\n                        <img src={'./assets/images/empty.png'} alt='cat' className={styles.empty__img} width={72} height={61} />\r\n                        <p className={styles.empty__text}>\r\n                            No mood history to show yet\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default MoodHistory\r\n","import MoodSelection from \"../MoodSelection\"\r\nimport MoodHistory from \"../MoodHistory\"\r\nimport { useState } from \"react\"\r\n\r\n\r\n\r\nconst Main = () => {\r\n    const [moodHistory, setMoodHistory] = useState(JSON.parse(localStorage.getItem('moodHistory')) || [])\r\n    return (\r\n        <main className=\"px-4 xs:px-12 xl:px-20 py-12 grid grid-cols-1 lg:grid-cols-2\">\r\n            <MoodSelection setMoodHistory={setMoodHistory} />\r\n            <MoodHistory moodHistory={moodHistory} />\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import './App.css';\r\nimport Main from './components/Main';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}